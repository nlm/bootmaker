#!/bin/sh

VERBOSE=${INITRD_VERBOSE:-0}

# Loading functions
. /functions

[ -f /etc/banner ] && (echo; cat /etc/banner; echo) || echo "BootMaker"
esuccess "Image build: $(cat /.builddate)"
esuccess "Kernel version: $(busybox uname -a)"
if [ ! -d "/lib/modules/$(uname -r)" ]; then
	eerror "module directory not found: /lib/modules/$(uname -r)"
fi
echo

# Mount the initial filesystems
log_begin_msg "Mounting pseudo-filesystems..."

[ -d /dev ] || run mkdir -m 0755 /dev
if ! emount -t devtmpfs -o nosuid,mode=0755 udev /dev; then
        echo "W: devtmpfs not available, falling back to tmpfs for /dev"
        emount -t tmpfs -o nosuid,mode=0755 udev /dev
        [ -e /dev/console ] || mknod -m 0600 /dev/console c 5 1
        [ -e /dev/null ] || mknod /dev/null c 1 3
fi
run mkdir /dev/pts
emount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts || true

[ -d /run ] || run mkdir -pm 0755 /run
emount -t tmpfs -o "noexec,nosuid,size=10%,mode=0755" tmpfs /run

[ -d /var ] || run mkdir -pm 0755 /var
run ln -s /run /var/run

[ -d /sys ] || run mkdir /sys
emount -t sysfs -o nodev,noexec,nosuid none /sys
run mdev -s

[ -d /proc ] || run mkdir /proc
emount -t proc -o nodev,noexec,nosuid none /proc
log_end_msg

[ -d /tmp ] || mkdir /tmp
[ -d /var/lock ] || mkdir -p /var/lock

# Some things don't work properly without /etc/mtab.
run ln -sf /proc/mounts /etc/mtab

log_begin_msg "Running rc scripts"
run-parts /etc/rc.d
log_end_msg

log_begin_msg "Starting Runit"
exec runsvdir -P /etc/service ........................................................................................................................................................................................................................................................................
log_end_msg

# Emergency Shell
while true; do
    (setsid cttyhack sh)
done

#log_begin_msg "Retrieving system info"
#esuccess "Kernel cmdline:    $(cat /proc/cmdline)"
#esuccess "Physycal memory:   $(grep MemTotal /proc/meminfo | awk '{ print $2 " " $3}')"
#esuccess "CPU model:         $(echo -ne $(grep ^model\ name /proc/cpuinfo  | cut -d: -f2 | uniq))"
#esuccess "CPU cores:         $(grep -c ^processor /proc/cpuinfo)"
#log_end_msg
#echo

## Detect Hardware
#log_begin_msg "Detecting hardware..."
#udevd --daemon
#udevadm trigger
#udevadm settle
#log_end_msg
#echo

#log_success_msg "Running services..."
#run-parts /etc/services-parts/
#log_end_msg

## Parsing kernel command-line
#for x in $(cat /proc/cmdline); do
#	case $x in
#        keymap=*)
#            KEYMAP=${x#keymap=}
#        ;;
#	esac
#done

# Loading Keymap
#if [ -n "${KEYMAP}" ]; then
#    log_begin_msg "Loading keymap"
#    loadkmap "/usr/share/bkeymaps/${KEYMAP}.bmap"
#    log_end_msg
#fi

## Setting Environment
#log_begin_msg "Setting environment"
#export HTTP_ROOT="/run/www"
#mkdir -p "${HTTP_ROOT}"
#log_end_msg
#
## Configure network
#log_begin_msg "Configuring network"
#run ifup -a
#ip a | grep inet
#ip a > "${HTTP_ROOT}/network.txt"
#log_end_msg
#echo


## Import boot-type functions
#case "${boot:-shell}" in
#    update|sysassert)
#        log_success_msg "Dropping a shell"
#        log_end_msg
#        ;;
#    *)
#        log_success_msg "Dropping a shell"
#        log_end_msg
#        while true; do
#            (setsid cttyhack sh)
#        done
#        ;;
#esac

## Adjust time
#if [ "$(get_any NO_NTPDATE)" != "1" ]; then
#    log_begin_msg "Adjusting time (ntp)"
#    # Clock is stepped after 3 NTP probes to each server, each query timeout in 1 second
#    # /etc/ntpsrv was improved with any NTP server(s) provided thru DHCP (see etc/udhcpc/default.script)
#    run ntpdate -b -p 3 -t 1 $(cat /etc/ntpsrv)
#    log_end_msg
#fi

