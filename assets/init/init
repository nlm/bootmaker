#!/bin/sh

VERBOSE=${INITRD_VERBOSE:-0}

# Loading functions
. /functions

cat <<EOF

Welcome to Online TestBench initrd

████████╗███████╗███████╗████████╗██████╗ ███████╗███╗   ██╗ ██████╗██╗  ██╗
╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝██╔══██╗██╔════╝████╗  ██║██╔════╝██║  ██║
   ██║   █████╗  ███████╗   ██║   ██████╔╝█████╗  ██╔██╗ ██║██║     ███████║
   ██║   ██╔══╝  ╚════██║   ██║   ██╔══██╗██╔══╝  ██║╚██╗██║██║     ██╔══██║
   ██║   ███████╗███████║   ██║   ██████╔╝███████╗██║ ╚████║╚██████╗██║  ██║
   ╚═╝   ╚══════╝╚══════╝   ╚═╝   ╚═════╝ ╚══════╝╚═╝  ╚═══╝ ╚═════╝╚═╝  ╚═╝

EOF

esuccess "Image build: $(cat /.builddate)"
esuccess "Kernel version: $(busybox uname -a)"
if [ ! -d "/lib/modules/$(uname -r)" ]; then
	eerror "module directory not found: /lib/modules/$(uname -r)"
fi
echo

# Mount the initial filesystems
log_begin_msg "Mounting pseudo-filesystems..."

[ -d /dev ] || run mkdir -m 0755 /dev
if ! emount -t devtmpfs -o nosuid,mode=0755 udev /dev; then
        echo "W: devtmpfs not available, falling back to tmpfs for /dev"
        emount -t tmpfs -o nosuid,mode=0755 udev /dev
        [ -e /dev/console ] || mknod -m 0600 /dev/console c 5 1
        [ -e /dev/null ] || mknod /dev/null c 1 3
fi
run mkdir /dev/pts
emount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts || true

[ -d /run ] || run mkdir -pm 0755 /run
emount -t tmpfs -o "noexec,nosuid,size=10%,mode=0755" tmpfs /run

[ -d /var ] || run mkdir -pm 0755 /var
run ln -s /run /var/run

[ -d /sys ] || run mkdir /sys
emount -t sysfs -o nodev,noexec,nosuid none /sys
run mdev -s

[ -d /proc ] || run mkdir /proc
emount -t proc -o nodev,noexec,nosuid none /proc
log_end_msg

[ -d /tmp ] || mkdir /tmp
[ -d /var/lock ] || mkdir -p /var/lock

# Some things don't work properly without /etc/mtab.
run ln -sf /proc/mounts /etc/mtab
echo

# Detect Hardware
log_begin_msg "Detecting hardware..."
udevd --daemon
udevadm trigger
udevadm settle
log_end_msg
echo

log_begin_msg "Retrieving system info"
esuccess "Kernel cmdline:    $(cat /proc/cmdline)"
esuccess "Physycal memory:   $(grep MemTotal /proc/meminfo | awk '{ print $2 " " $3}')"
esuccess "CPU model:         $(echo -ne $(grep ^model\ name /proc/cpuinfo  | cut -d: -f2 | uniq))"
esuccess "CPU cores:         $(grep -c ^processor /proc/cpuinfo)"
log_end_msg
echo

# Parsing kernel command-line
for x in $(cat /proc/cmdline); do
	case $x in
        keymap=*)
            KEYMAP=${x#keymap=}
        ;;
	esac
done

# Loading Keymap
if [ -n "${KEYMAP}" ]; then
    log_begin_msg "Loading keymap"
    loadkmap "/usr/share/bkeymaps/${KEYMAP}.bmap"
    log_end_msg
fi

# Setting Environment
log_begin_msg "Setting environment"
export HTTP_ROOT="/run/www"
mkdir -p "${HTTP_ROOT}"
log_end_msg

# Configure network
log_begin_msg "Configuring network"
run ifup -a
ip a | grep inet
ip a > "${HTTP_ROOT}/network.txt"
log_end_msg
echo

#if [ "$(get_opt ip)" = "dhcp" -o "$(get_opt ip)" = ":::::eth0:" ]; then
#    for INTERFACE in $INTERFACES; do
#        run udhcpc -n -q -i $INTERFACE up
#    done
#fi
#if [ "$(get_opt nameserver)" != "" ]; then
#    run sh -ec "echo nameserver '$(get_opt nameserver)' > /etc/resolv.conf"
#fi
#log_end_msg

# Configure ipv6
#if [ "$(get_any NO_IPV6)" != "1" ]; then
#	IPV6=$(scw-metadata --cached IPV6)
#
#	if [ "$IPV6" != "" ]; then
#		log_begin_msg "Configuring ipv6"
#
#		IP=$(scw-metadata --cached IPV6_ADDRESS)
#		GW=$(scw-metadata --cached IPV6_GATEWAY)
#		MASK=$(scw-metadata --cached IPV6_NETMASK)
#		run ip -6 addr add dev eth0 $IP/$MASK
#		run ip -6 route add default via $GW
#		log_end_msg
#	fi
#fi


## Drop debug shell
#log_begin_msg "Checking user input for debug shell"
#if [ "$(get_any INITRD_PRE_SHELL)" = "1" ]; then
#    # Prevent the server to stop automatically every 5 minutes (boot timeout)
#    signal_state booted
#    export NO_SIGNAL_STATE=1
#
#    # drop the shell
#    log_success_msg "Dropping a debug shell"
#    log_end_msg
#    echo "**DEBUG SHELL** (requested from the user)"
#    echo "To continue the initrd process, just type C^d"
#    /bin/sh
#else
#    log_end_msg
#fi

log_success_msg "Running services..."
run-parts /etc/services-parts/
log_end_msg

# Import boot-type functions
case "${boot:-shell}" in
    update|sysassert)
        log_success_msg "Dropping a shell"
        log_end_msg
        ;;
    *)
        log_success_msg "Dropping a shell"
        log_end_msg
        while true; do
            (setsid cttyhack sh)
        done
        ;;
esac


## Adjust time
#if [ "$(get_any NO_NTPDATE)" != "1" ]; then
#    log_begin_msg "Adjusting time (ntp)"
#    # Clock is stepped after 3 NTP probes to each server, each query timeout in 1 second
#    # /etc/ntpsrv was improved with any NTP server(s) provided thru DHCP (see etc/udhcpc/default.script)
#    run ntpdate -b -p 3 -t 1 $(cat /etc/ntpsrv)
#    log_end_msg
#fi


## optional kexec
#if [ "$(get_any is_in_kexec no)" = "yes" ]; then
#    esuccess "Running in a kexec"
#    export NO_SIGNAL_STATE=1
#else
#    if [ "$(get_any KEXEC_KERNEL 'default')" != "default" -a "$(get_any KEXEC_INITRD 'default')" != "default" ]; then
#	KEXEC_KERNEL="$(get_any KEXEC_KERNEL default)"
#	KEXEC_INITRD="$(get_any KEXEC_INITRD default)"
#	KEXEC_APPEND="$(get_any KEXEC_APPEND '')"
#	esuccess "kexec: kernel=${KEXEC_KERNEL} initrd=${KEXEC_INITRD} append='${KEXEC_APPEND}'"
#
#	# get kernel and initrd
#	mkdir -p /boot
#	if [ "${KEXEC_KERNEL}" = "latest" ]; then
#	    cp $(ls "${rootmnt}"/boot/vmlinuz* | tail -n 1) /boot/kernel
#	else
#	    if [ -f "${rootmnt}/${KEXEC_KERNEL}" ]; then
#		cp "${rootmnt}/${KEXEC_KERNEL}" /boot/kernel
#	    else
#		wget ${KEXEC_KERNEL} -O /boot/kernel
#	    fi
#	fi
#	if [ -f "${rootmnt}/${KEXEC_INITRD}" ]; then
#	    cp "${rootmnt}/${KEXEC_INITRD}" /boot/initrd
#	else
#	    wget ${KEXEC_INITRD} -O /boot/initrd
#	fi
#
#	# run kexec
#	if [ -f /boot/kernel ]; then
#	    if [ -f /boot/initrd ]; then
#		# detach nbd devices
#		detach_nbd_devices
#
#		# kexec
#		kexec -l /boot/kernel --initrd=/boot/initrd --append="$(cat /proc/cmdline) is_in_kexec=yes ${KEXEC_APPEND}" -f
#	    else
#		ewarn "kexec: initrd not found"
#	    fi
#	else
#	    ewarn "kexec: kernel not found"
#	fi
#    fi
#fi
